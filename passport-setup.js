const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const Patient = require('./models/Patient'); // Adjust to your Patient model
const Doctor = require('./models/Doctor'); // Adjust to your Doctor model
const crypto = require('crypto');

// Function to generate a random password
const generateRandomPassword = () => {
  const buffer = crypto.randomBytes(8); // Generate 8 bytes of random data
  return buffer.toString('base64').slice(0, 8); // Convert to base64 and slice to 8 characters
};

passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    let user = await Patient.findById(id);
    if (!user) {
      user = await Doctor.findById(id);
    }
    done(null, user);
  } catch (err) {
    done(err, null);
  }
});


passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  callbackURL: '/auth/google/callback'
}, async (accessToken, refreshToken, profile, done) => {
  try {
    let user;
    if (profile.emails && profile.emails.length > 0 && profile.emails[0].value) {
      // Check if the email already exists in either collection
      user = await Patient.findOne({ email: profile.emails[0].value });
      if (!user) {
        user = await Doctor.findOne({ email: profile.emails[0].value });
      }
    }

    if (!user) {
      // Email does not exist, create a new user
      if (profile.emails && profile.emails.length > 0 && profile.emails[0].value) {
        const newUser = {
          googleId: profile.id,
          name: profile.displayName,
          email: profile.emails[0].value,
          password: generateRandomPassword(), // Autogenerated password
        };

        // Here, assuming role selection logic is based on user interaction
        // You may need to customize this based on your application's requirements
        // For demonstration, assume role is passed as query parameter or session variable
        let role = req.query.role; // Get role from query parameter

        if (!role) {
          console.log('Role not provided. Redirect to select role page.');
          return done(null, false, { message: 'Please select your role.' });
        }

        if (role !== 'patient' && role !== 'doctor') {
          console.log('Invalid role specified.');
          return done(null, false, { message: 'Invalid role specified.' });
        }

        newUser.role = role;

        if (role === 'patient') {
          const newPatient = new Patient(newUser);
          await newPatient.save();
          done(null, newPatient);
          console.log('New Patient Created:', newPatient);
        } else if (role === 'doctor') {
          const newDoctor = new Doctor(newUser);
          await newDoctor.save();
          done(null, newDoctor);
          console.log('New Doctor Created:', newDoctor);
        } else {
          done(null, null); // Handle other roles or errors appropriately
        }
      } else {
        done(null, null); // Handle scenario where email is not provided in profile
      }
    } else {
      // Existing user found, log them in
      done(null, user);
      console.log('Existing User:', user);
    }
  } catch (err) {
    console.error('Error in Google OAuth strategy:', err);
    done(err, null);
  }
}));


module.exports = passport;
