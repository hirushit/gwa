<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find a Doctor</title>
    <style>
        .filter-container {
            display: flex;
            flex-direction: column;
            width: 200px;
            margin-right: 20px;
        }

        .doctor-card {
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
            width: 600px;
            height: 300px;
        }

        .container {
            display: flex;
            flex-wrap: nowrap; 
            margin-top: 20px;
        }

        .map-container {
            flex: 1;
            min-width: 300px;
            margin-left: 20px;
        }

        #map {
            width: 100%;
            height: 100vh; 
        }

        #results-container {
            flex: 2;
            display: flex;
            flex-direction: column; 
            gap: 10px;
            overflow-y: auto;
        }

        .custom-info-window {
    max-width: 300px; 
    padding: 10px;
    font-size: 14px;
    background-color: #fff; /* White background */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); /* Shadow effect */
    border: 1px solid #ccc; /* Light gray border */
}

.custom-info-window strong {
    color: #333; /* Darker text for emphasis */
}

.custom-info-window a {
    color: #007bff; /* Bootstrap primary color */
    text-decoration: none; /* Remove underline */
}

.custom-info-window a:hover {
    text-decoration: underline; /* Underline on hover */
}

        .custom-marker img {
            width: 40px;  /* Adjust width */
            height: 40px; /* Adjust height */
            border-radius: 50%; /* Make it circular */
            border: 2px solid #fff; /* Optional: white border */
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.5); /* Optional: shadow effect */
        }


        

    </style>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= process.env.GOOGLE_MAPS_API_KEY %>&callback=initMap" async defer></script>
</head>
<body>
    <h1>Find a Doctor</h1>
    <div class="search-container">
        <label for="what">What:</label>
        <input type="text" id="what" placeholder="Search by name or speciality">

        <label for="where">Where:</label>
        <input type="text" id="where" placeholder="Search by location">

        <button onclick="searchDoctors()">Search</button>

        <label for="sortOptions">Sort by:</label>
        <select id="sortOptions" onchange="sortDoctors()">
            <option value="">Select</option>
            <option value="highestRated">Highest Rated</option>
            <option value="mostReviewed">Most Reviewed</option>
        </select>
    </div>
    
    <div class="container">
        <div class="filter-container">
            <label for="country">Country:</label>
            <select id="country" onchange="searchDoctors()">
                <option value="">Select Country</option>
            </select>

            <label for="state">State:</label>
            <select id="state" onchange="searchDoctors()">
                <option value="">Select State</option>
            </select>

            <label for="city">City:</label>
            <select id="city" onchange="searchDoctors()">
                <option value="">Select City</option>
            </select>

            <label for="speciality">Speciality:</label>
            <select id="speciality" onchange="searchDoctors()">
                <option value="">Select Speciality</option>
            </select>

            <label for="conditions">Conditions:</label>
            <select id="conditions" multiple onchange="searchDoctors()">
                <option value="">Select Conditions</option>
            </select>

            <label for="languages">Language Spoken:</label>
            <select id="languages" multiple onchange="searchDoctors()">
                <option value="">Select Languages</option>
            </select>

            <label for="gender">Gender:</label>
            <select id="gender" onchange="searchDoctors()">
                <option value="">Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </select>

            <label for="hospital">Hospital:</label>
            <select id="hospital" onchange="searchDoctors()">
                <option value="">Select Hospital</option>
            </select>

            <label for="availability">Available Now:</label>
            <select id="availability" onchange="searchDoctors()">
                <option value="">Select Availability</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>

            <label for="dateAvailability">Date Availability:</label> 
            <input type="date" id="dateAvailability" onchange="searchDoctors()">

            <label for="consultation">Consultation Type:</label>
            <select id="consultation" onchange="searchDoctors()">
                <option value="">Select Consultation Type</option>
                <option value="In-person">In-Person</option>
                <option value="Video Call">Video Call</option>
                <option value="Both">Both</option>
            </select>

            <div class="button-container">
                <button onclick="resetFilters()">Reset Filters</button>
            </div>
        </div>

        <div id="results-container">
        </div>

        <div class="map-container">
            <div id="map"></div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            populateDropdowns();
            populateSearchFieldsFromUrl();
            searchDoctors();
            initMap(); 
        });

        function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        zoom: 10,
        center: { lat: 20.5937, lng: 78.9629 }
    });

    const doctors = <%- JSON.stringify(doctors) %>;
    const uniqueLocations = <%- JSON.stringify(uniqueLocations) %>;

    const bounds = new google.maps.LatLngBounds();

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const userLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                map.setCenter(userLocation);
                map.setZoom(14);

                userMarker = new google.maps.Marker({
                    position: userLocation,
                    map: map,
                    title: 'Your Location',
                    icon: {
                        url: '/marker.png', // Path to your icon
                        scaledSize: new google.maps.Size(30, 30) // Adjust size as needed
                    }
                });

                // Create an InfoWindow for the user's location
                const userInfoWindow = new google.maps.InfoWindow({
                     content: `<div class="custom-info-window user-location-info"><strong>You are here</strong></div>`
                });

                // Open the InfoWindow immediately
                userInfoWindow.open(map, userMarker);

                // Add click listener to reopen the InfoWindow
                userMarker.addListener('click', () => {
                    userInfoWindow.open(map, userMarker);
                });

                bounds.extend(userLocation);

                uniqueLocations.forEach(location => {
                    const position = { lat: location.lat, lng: location.lng };

                    createCircularImage(location.doctorProfilePic, (circularImageUrl) => {
                        const customMarker = {
                            url: circularImageUrl, 
                            scaledSize: new google.maps.Size(40, 40), 
                            origin: new google.maps.Point(0, 0), 
                            anchor: new google.maps.Point(20, 20), 
                            shape: {
                                coords: [20, 20, 20], 
                                type: 'circle'
                            }
                        };

                        const marker = new google.maps.Marker({
                            position: position,
                            map: map,
                            icon: customMarker,
                            title: `${location.doctorName} - ${location.hospitalName}`
                        });

                        const distance = computeDistance(userLocation, position);
                        const infoWindow = new google.maps.InfoWindow({
                                content: `
                                    <div class="custom-info-window">
                                        <strong>Doctor:</strong> ${location.doctorName}, ${location.doctorTitle} <br>
                                        <strong>Hospital:</strong> ${location.hospitalName}<br>
                                        <strong>Distance:</strong> ${distance.toFixed(2)} km away <br>
                                        <a href="https://www.google.com/maps/dir/?api=1&destination=${location.lat},${location.lng}" target="_blank">View Directions</a>
                                    </div>
                                `
                            });

                        marker.addListener('click', () => {
                            infoWindow.open(map, marker);
                        });

                        bounds.extend(position);
                    });
                });

                map.fitBounds(bounds);

                const maxZoomLevel = 14;
                map.addListener('bounds_changed', () => {
                    if (map.getZoom() > maxZoomLevel) {
                        map.setZoom(maxZoomLevel);
                    }
                });
            },
            () => {
                handleLocationError(true, map.getCenter());
            }
        );
    } else {
        handleLocationError(false, map.getCenter());
    }
}

function createCircularImage(imageUrl, callback) {
    const img = new Image();
    img.onload = () => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const size = Math.min(img.width, img.height);
        
        canvas.width = size;
        canvas.height = size;

        ctx.beginPath();
        ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);
        ctx.closePath();
        ctx.clip();

        ctx.drawImage(img, 0, 0, size, size);

        callback(canvas.toDataURL());
    };
    img.src = imageUrl;
}


function computeDistance(loc1, loc2) {
            const rad = (x) => x * Math.PI / 180;
            const R = 6371; 
            const dLat = rad(loc2.lat - loc1.lat);
            const dLng = rad(loc2.lng - loc1.lng);
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                      Math.cos(rad(loc1.lat)) * Math.cos(rad(loc2.lat)) *
                      Math.sin(dLng / 2) * Math.sin(dLng / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }



        async function populateDropdowns() {
            await populateCountryDropdown();
            await populateStateDropdown();
            await populateCityDropdown();
            await populateSpecialityDropdown();
            await populateConditionsDropdown(); 
            await populateLanguagesDropdown();
            await populateHospitalDropdown();
        }

        async function populateCountryDropdown() {
            try {
                const response = await fetch('/auth/countries');
                const countries = await response.json();
                const countrySelect = document.getElementById('country');

                countries.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country;
                    option.textContent = country;
                    countrySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching countries:', error);
            }
        }

        async function populateStateDropdown() {
            try {
                const response = await fetch('/auth/states');
                const states = await response.json();
                const stateSelect = document.getElementById('state');

                states.forEach(state => {
                    const option = document.createElement('option');
                    option.value = state;
                    option.textContent = state;
                    stateSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching states:', error);
            }
        }

        async function populateCityDropdown() {
            try {
                const response = await fetch('/auth/cities');
                const cities = await response.json();
                const citySelect = document.getElementById('city');
        
                citySelect.innerHTML = '';
        
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Select a city';
                citySelect.appendChild(defaultOption);
        
                cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city;
                    option.textContent = city;
                    citySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching cities:', error);
            }
        }
        
        async function populateSpecialityDropdown() {
            try {
                const response = await fetch('/auth/specialities');
                const specialities = await response.json();
                const specialitySelect = document.getElementById('speciality');

                specialities.forEach(speciality => {
                    const option = document.createElement('option');
                    option.value = speciality;
                    option.textContent = speciality;
                    specialitySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching specialities:', error);
            }
        }

        async function populateConditionsDropdown() {
            try {
                const response = await fetch('/auth/conditions');
                const conditions = await response.json();
                const conditionsSelect = document.getElementById('conditions');

                conditions.forEach(condition => {
                    const option = document.createElement('option');
                    option.value = condition;
                    option.textContent = condition;
                    conditionsSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching conditions:', error);
            }
        }

        async function populateLanguagesDropdown() {
            try {
                const response = await fetch('/auth/languages');
                const languages = await response.json();
                const languagesSelect = document.getElementById('languages');

                languages.forEach(language => {
                    const option = document.createElement('option');
                    option.value = language;
                    option.textContent = language;
                    languagesSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching languages:', error);
            }
        }

        async function populateHospitalDropdown() {
            try {
                const response = await fetch('/auth/hospitals');
                const hospitals = await response.json();
                const hospitalSelect = document.getElementById('hospital');

                hospitals.forEach(hospital => {
                    const option = document.createElement('option');
                    option.value = hospital;
                    option.textContent = hospital;
                    hospitalSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching hospitals:', error);
            }
        }

        async function populateSearchFieldsFromUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            const what = urlParams.get('what');
            const where = urlParams.get('where');

            document.getElementById('what').value = what || '';
            document.getElementById('where').value = where || '';
        }
        async function searchDoctors() {
            const what = document.getElementById('what').value;
            const where = document.getElementById('where').value;
            const country = document.getElementById('country').value;
            const state = document.getElementById('state').value;
            const city = document.getElementById('city').value;
            const speciality = document.getElementById('speciality').value;
            const languagesSelect = document.getElementById('languages');
            const languages = Array.from(languagesSelect?.selectedOptions || []).map(option => option.value).join(',');
            const gender = document.getElementById('gender').value;
            const hospitalsSelect = document.getElementById('hospital');
            const hospital = Array.from(hospitalsSelect.selectedOptions).map(option => option.value);
            const availability = document.getElementById('availability').value;
            const dateAvailability = document.getElementById('dateAvailability').value;
            const consultation = document.getElementById('consultation').value;

            const conditionsSelect = document.getElementById('conditions');
            const conditions = Array.from(conditionsSelect?.selectedOptions || []).map(option => option.value).join(',');

            const url = `/auth/search-doctors?what=${what}&where=${where}&country=${country}&state=${state}&city=${city}&speciality=${speciality}&languages=${languages}&gender=${gender}&hospitals=${hospital}&availability=${availability}&dateAvailability=${dateAvailability}&consultation=${consultation}&conditions=${conditions}`;

            try {
                const response = await fetch(url);
                const doctors = await response.json();

                const resultsContainer = document.getElementById('results-container');
                resultsContainer.innerHTML = '';

                if (doctors.length === 0) {
                    resultsContainer.textContent = 'No doctors found.';
                    return;
                }

                doctors.forEach(doctor => {
                    const doctorCard = document.createElement('div');
                    doctorCard.className = 'doctor-card';
                    let hospitalsInfo = '';

                    doctor.hospitals.forEach(hospital => {
                        hospitalsInfo += `${hospital.name}, ${hospital.city}<br>`;
                    });

                    doctorCard.innerHTML = `
                        <h2>${doctor.name}</h2>
                        <p>Speciality: ${doctor.speciality.join(', ')}</p>
                        <p>Rating: ${doctor.rating}</p>
                        <p>Available Now: ${doctor.availability ? 'Yes' : 'No'}</p>
                        <p>City: ${doctor.conditions}</p>
                        <button onclick="showDoctorDetails('${doctor._id}')">View Details</button>
                    `;
                    resultsContainer.appendChild(doctorCard);
                });



            } catch (error) {
                console.error('Error fetching doctors:', error);
                const resultsContainer = document.getElementById('results-container');
                resultsContainer.textContent = 'Failed to fetch doctors. Please try again later.';
            }
        }


        async function showDoctorDetails(doctorId) {
            window.location.href = `/patient/doctors/${doctorId}/slots`;
        }

        function sortDoctors() {
            const sortOption = document.getElementById('sortOptions').value;
            const what = document.getElementById('what').value;
            const where = document.getElementById('where').value;
        
            let url = `/auth/search-doctors?sort=${sortOption}&what=${what}&where=${where}`;
        
            const country = document.getElementById('country').value;
            const state = document.getElementById('state').value;
            const city = document.getElementById('city').value;
            const speciality = document.getElementById('speciality').value;
            const languagesSelect = document.getElementById('languages');
            const languages = Array.from(languagesSelect?.selectedOptions || []).map(option => option.value).join(',');
            const gender = document.getElementById('gender').value;
            const hospitalsSelect = document.getElementById('hospital');
            const hospital = Array.from(hospitalsSelect.selectedOptions).map(option => option.value);
            const availability = document.getElementById('availability').value;
            const dateAvailability = document.getElementById('dateAvailability').value;
            const consultation = document.getElementById('consultation').value;
        
            const conditionsSelect = document.getElementById('conditions');
            const conditions = Array.from(conditionsSelect?.selectedOptions || []).map(option => option.value).join(',');
        
            url += `&country=${country}&state=${state}&city=${city}&speciality=${speciality}&languages=${languages}&gender=${gender}&hospitals=${hospital}&availability=${availability}&dateAvailability=${dateAvailability}&consultation=${consultation}&conditions=${conditions}`;
        
            fetchAndDisplayDoctors(url);
        }
        

        async function fetchAndDisplayDoctors(url) {
            try {
                const response = await fetch(url);
                const doctors = await response.json();
        
                const resultsContainer = document.getElementById('results-container');
                resultsContainer.innerHTML = '';
        
                if (doctors.length === 0) {
                    resultsContainer.textContent = 'No doctors found.';
                    return;
                }
        
                doctors.forEach(doctor => {
                    const doctorCard = document.createElement('div');
                    doctorCard.className = 'doctor-card';
                    let hospitalsInfo = '';
                    let conditionsInfo = '';
        
                    if (doctor.hospitals) {
                        doctor.hospitals.forEach(hospital => {
                            hospitalsInfo += `${hospital.name}<br>`;
                        });
                    }
        
                    if (doctor.conditions) {
                        conditionsInfo = doctor.conditions.join(', ');
                    }
        
                    doctorCard.innerHTML = `
                        <h2>${doctor.name}</h2>
                        <p>Speciality: ${doctor.speciality.join(', ')}</p>
                        <p>Rating: ${doctor.rating}</p>
                        <p>Available Now: ${doctor.availability ? 'Yes' : 'No'}</p>
                        <p>Hospitals: ${hospitalsInfo}</p>
                        <p>Conditions Treated: ${conditionsInfo}</p>
                        <button onclick="showDoctorDetails('${doctor._id}')">View Details</button>
                    `;
                    resultsContainer.appendChild(doctorCard);
                });
            } catch (error) {
                console.error('Error fetching doctors:', error);
                const resultsContainer = document.getElementById('results-container');
                resultsContainer.textContent = 'Failed to fetch doctors. Please try again later.';
            }
        }
        
        

        function resetFilters() {
            document.getElementById('what').value = '';
            document.getElementById('where').value = '';
            document.getElementById('country').value = '';
            document.getElementById('state').value = '';
            document.getElementById('city').value = '';
            document.getElementById('speciality').value = '';
            document.getElementById('languages').value = '';
            document.getElementById('gender').value = '';
            document.getElementById('hospital').value = '';
            document.getElementById('availability').value = '';
            document.getElementById('dateAvailability').value = '';
            document.getElementById('consultation').value = '';
            document.getElementById('conditions').value = ''; 

            searchDoctors();
        }
    </script>

</body>
</html>
